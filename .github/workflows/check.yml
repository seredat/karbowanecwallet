name: Build check

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*'            # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-latest
    env:
      BOOST_ROOT: C:\thirdparties\boost-1.72.0
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install Boost
        shell: cmd
        run: |
          choco install wget --no-progress
          wget -nv -O boost-installer.exe "https://sourceforge.net/projects/boost/files/boost-binaries/1.72.0/boost_1_72_0-msvc-14.2-64.exe/download"
          boost-installer.exe /dir=%BOOST_ROOT% /sp- /verysilent /suppressmsgboxes /norestart

      - name: Install OpenSSL
        run: choco install openssl

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.1'
          host: 'windows'
          target: 'desktop'
          modules: 'qttools5'
          install-deps: 'true'

      - name: Install NSIS
        uses: joncloud/makensis-action@v1
        with:
          just-include: true

      - name: Build
        shell: powershell
        id: build
        env:
          GIT_REDIRECT_STDERR: '2>&1'
          VCINSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\'
        run: |
          $build_folder = "build"
          $krb_ver = git describe --tags --abbrev=0
          $release_name = "Karbo-wallet-win64-${krb_ver}"
          $release_folder = "Release"
          echo "$release_name"
          set CMAKE_PREFIX_PATH="$($qt5_cmake)"
          $qt5_cmake = "${{ env.Qt5_Dir }}/lib/cmake" -replace '[/]', '\\'
          mkdir "$build_folder"
          cd "$build_folder"
          Start-Process cmake -ArgumentList "-DBOOST_ROOT=""$env:BOOST_ROOT"" -DBOOST_INCLUDE_DIRS=""$env:BOOST_ROOT/include"" -G ""Visual Studio 16 2019"" -A x64 -DARCH=default",".." -NoNewWindow -Wait
          Start-Process msbuild -ArgumentList "KarbowanecWallet.sln","/p:Configuration=Release" -NoNewWindow -Wait
          $build_path = "./$build_folder"
          mkdir "$release_folder/$release_name"
          mkdir "$release_folder/$release_name/languages"
          cp languages/*.qm "$release_folder/$release_name/languages/"
          cd "$release_folder"
          cp KarbowanecWallet.exe "$release_name/"
          cp "C:/Program Files/OpenSSL-Win64/bin/libssl*.dll" "$release_name/"
          cp "C:/Program Files/OpenSSL-Win64/bin/libcrypto*.dll" "$release_name/"
          cp "../../COPYING" "$release_name/LICENSE.txt"
          cp "../../*.bat" "$release_name/"
          windeployqt --release KarbowanecWallet.exe --dir "$release_name/"
          Compress-Archive -Path "$release_name/" -DestinationPath "$release_name.zip"
          $sha256a = (Get-FileHash "$release_name.zip").Hash
          $asset_path_archive = "./$build_folder/$release_folder/$release_name.zip"
          echo "::set-output name=sha256a::${sha256a}"
          echo "::set-output name=release_name_archive::${release_name}.zip"
          echo "::set-output name=asset_path_archive::${asset_path_archive}"
          cd ../
          makensis WindowsInstall.nsi
          cd "$release_folder"
          Compress-Archive -Path "KarbowanecWallet-Setup.exe" -DestinationPath "$release_name-install.zip"
          $sha256i = (Get-FileHash "$release_name-install.zip").Hash
          $asset_path_install = "./$build_folder/$release_folder/$release_name-install.zip"
          echo "::set-output name=sha256i::${sha256i}"
          echo "::set-output name=release_name_install::${release_name}-install.zip"
          echo "::set-output name=asset_path_install::${asset_path_install}"

      - name: Create Archive Artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          path: ${{ steps.build.outputs.asset_path_archive }}
          name: ${{ steps.build.outputs.release_name_archive }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Installer Artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          path: ${{ steps.build.outputs.asset_path_install }}
          name: ${{ steps.build.outputs.release_name_install }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install gcc
        run: |
          export ARCHFLAGS='-arch arm64'
          brew install gcc

      - name: Install boost
        shell: zsh {0}
        run: |
          setopt sh_word_split
          mkdir arm-homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C arm-homebrew 
          alias arm-brew='$(pwd)/arm-homebrew/bin/brew'
          response=$(arm-brew fetch --force --bottle-tag=arm64_big_sur boost | grep "Downloaded to")
          parsed=($response)  
          arm-brew install $parsed[3]
          arm-brew link boost --force

      - name: Install qt5
        shell: zsh {0}
        run: |
          setopt sh_word_split
          mkdir arm-homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C arm-homebrew 
          alias arm-brew='$(pwd)/arm-homebrew/bin/brew'
          response=$(arm-brew fetch --force --bottle-tag=arm64_big_sur qt5 | grep "Downloaded to")
          parsed=($response)  
          arm-brew install $parsed[3]
          
      - name: Install openssl
        shell: zsh {0}
        run: |
          setopt sh_word_split
          mkdir arm-homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C arm-homebrew 
          alias arm-brew='$(pwd)/arm-homebrew/bin/brew'
          response=$(arm-brew fetch --force --bottle-tag=arm64_big_sur openssl | grep "Downloaded to")
          parsed=($response)  
          arm-brew install $parsed[3]

      - name: Find Tag
        id: tagger
        uses: jimschubert/query-tag-action@v1
        with:
          include: 'v*'
          exclude: '*-rc*'
          commit-ish: 'HEAD~'
          skip-unshallow: 'true'

      - name: Build
        id: build
        shell: zsh {0}
        run: |
          export PATH="/Users/runner/work/karbowanecwallet/karbowanecwallet/arm-homebrew/opt/openssl@3/bin:$PATH"
          export PATH="/Users/runner/work/karbowanecwallet/karbowanecwallet/arm-homebrew/opt/qt@5/bin:$PATH"
          export PKG_CONFIG_PATH="/Users/runner/work/karbowanecwallet/karbowanecwallet/arm-homebrew/opt/qt@5/lib/pkgconfig"
          export LDFLAGS="-L/Users/runner/work/karbowanecwallet/karbowanecwallet/arm-homebrew/opt/qt@5/lib"
          export CPPFLAGS="-I/Users/runner/work/karbowanecwallet/karbowanecwallet/arm-homebrew/opt/qt@5/include"
          build_folder="build/release"
          krb_ver="${{steps.tagger.outputs.tag}}"
          release_name="Karbo-wallet-macOS-$krb_ver"
          app_name="KarbowanecWallet.app"
          lang_folder="/Contents/Resources/languages"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -D ARCH=default -D CMAKE_C_FLAGS="-target arm64e-apple-macos11.0 -mmacosx-version-min=11.0" -D CMAKE_CXX_FLAGS="-target arm64e-apple-macos11.0 -mmacosx-version-min=11.0" -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -DCMAKE_OSX_ARCHITECTURES=arm64 -D CMAKE_BUILD_TYPE=Release -DBOOST_ROOT=/Users/runner/work/karbowanecwallet/karbowanecwallet/arm-homebrew/Cellar/boost/1.76.0 -DBOOST_INCLUDE_DIRS=/Users/runner/work/karbowanecwallet/karbowanecwallet/arm-homebrew/Cellar/boost/1.76.0/include ../..
          make
          mkdir "$app_name$lang_folder"
          cp languages/*.qm "$app_name$lang_folder"
          /Users/runner/work/karbowanecwallet/karbowanecwallet/arm-homebrew/opt/qt@5/bin/macdeployqt "$app_name"
          cpack
          mv *.dmg "$release_name".dmg
          sha256=$(shasum -a 256 "$release_name".dmg | awk '{ print toupper($1) }')
          asset_path="./$build_folder/$release_name.dmg"
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=krb_ver::${krb_ver}"
        env:
          MACOSX_DEPLOYMENT_TARGET: '11.0'

      - name: Create Artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          path: ${{ steps.build.outputs.asset_path }}
          name: ${{ steps.build.outputs.release_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu20:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Find Tag
        id: tagger
        uses: jimschubert/query-tag-action@v1
        with:
          include: 'v*'
          exclude: '*-rc*'
          commit-ish: 'HEAD~'
          skip-unshallow: 'true'

      - name: Build
        id: build
        run: |
          sudo apt update -y
          sudo apt install -y qt5-default qttools5-dev qttools5-dev-tools libboost-all-dev
          build_folder="build/release"
          krb_ver="${{steps.tagger.outputs.tag}}"
          release_name=Karbo-wallet-ubuntu-20.04-$krb_ver
          app_name="KarbowanecWallet"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -D ARCH=default -D CMAKE_BUILD_TYPE=Release -D CMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -D BOOST_IGNORE_SYSTEM_PATHS_DEFAULT=ON -D BOOST_ROOT=/usr ../..
          make
          cpack
          tar -czf "$release_name".tar.gz *.deb
          sha256=$(shasum -a 256 "$release_name".tar.gz | awk '{print toupper($1)}')
          asset_path="./$build_folder/$release_name".tar.gz
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.tar.gz"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=krb_ver::${krb_ver}"

      - name: Create Artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          path: ${{ steps.build.outputs.asset_path }}
          name: ${{ steps.build.outputs.release_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu18:
    name: Ubuntu 18.04
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Find Tag
        id: tagger
        uses: jimschubert/query-tag-action@v1
        with:
          include: 'v*'
          exclude: '*-rc*'
          commit-ish: 'HEAD~'
          skip-unshallow: 'true'

      - name: Build
        id: build
        run: |
          sudo apt-get purge '*boost*'
          sudo apt update -y
          sudo apt install -y qt5-default qttools5-dev qttools5-dev-tools libboost1.62-all-dev
          build_folder="build/release"
          krb_ver="${{steps.tagger.outputs.tag}}"
          release_name=Karbo-wallet-ubuntu-18.04-$krb_ver
          app_name="KarbowanecWallet"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -D ARCH=default -D CMAKE_BUILD_TYPE=Release -D CMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -D BOOST_IGNORE_SYSTEM_PATHS_DEFAULT=ON -D BOOST_ROOT=/usr ../..
          make
          cpack
          tar -czf "$release_name".tar.gz *.deb
          sha256=$(shasum -a 256 "$release_name".tar.gz | awk '{print toupper($1)}')
          asset_path="./$build_folder/$release_name".tar.gz
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.tar.gz"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=krb_ver::${krb_ver}"

      - name: Create Artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          path: ${{ steps.build.outputs.asset_path }}
          name: ${{ steps.build.outputs.release_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
